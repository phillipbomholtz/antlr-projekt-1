import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.util.*;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Simple calculator\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	simpleCalcLexer lex = new simpleCalcLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	simpleCalcParser parser = new simpleCalcParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Double result=interpreter.visit(parseTree);
	
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

    // An environment mapping variablenames to double values (initially empty)
    public static HashMap<String,Double> env=new HashMap<String,Double>();
    
    public Double visitStart(simpleCalcParser.StartContext ctx){
	// New implementation: visit all assignments:
	for (simpleCalcParser.ExprContext a:ctx.as)
	    visit(a);
	return visit(ctx.e);
    };

    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
	return visit(ctx.e);
	};
	    
    public Double visitVariable(simpleCalcParser.VariableContext ctx){
	// New implementation: look up the value of the variable in the environment env:
	String varname=ctx.x.getText();
	Double d=env.get(varname);
	if (d==null){
	    System.err.println("Variable "+varname+" is not defined.\n");
	    System.exit(-1);
	}
	return d;
    };
	
	//function that handles addition and subtraction
    public Double visitAddSub(simpleCalcParser.AddSubContext ctx){
	if (ctx.op.getText().equals("+"))
	    return visit(ctx.e1)+visit(ctx.e2);
	else
	    return visit(ctx.e1)-visit(ctx.e2 );	    
    };

	//function that handles multiplication and division
    public Double visitMulDiv(simpleCalcParser.MulDivContext ctx){
		if(ctx.op.getText().equals("*")){
			return visit(ctx.e1)*visit(ctx.e2);
		}else{
			return visit(ctx.e1)/visit(ctx.e2);
		}
    };

    public Double visitConstant(simpleCalcParser.ConstantContext ctx){
	return Double.parseDouble(ctx.c.getText()); 
    };

    public Double visitSignedConstant(simpleCalcParser.SignedConstantContext ctx){
	return Double.parseDouble(ctx.getText());
    };
    
    public Double visitAssign(simpleCalcParser.AssignContext ctx){
	// New implementation: evaluate the expression and store it in the environment for the given
	// variable name
	String varname=ctx.x.getText();
	Double v = visit(ctx.e);
	env.put(varname,v);

	return v;
	};

	//funtion for handle relations that returns a 1 or 0 depenting on wether the statement is true or false
	//all values are cast to doubles for safer evaluation
	public Double visitRelation(simpleCalcParser.RelationContext ctx){

		if(ctx.op.getText().equals(">")){                                //for operator '>'
			if((double)this.visit(ctx.e1) > (double)this.visit(ctx.e2)){
				return 1.0;
			}
			else
			{
				return 0.0;
			}
			
		}
		else if(ctx.op.getText().equals("<"))                           //for operator '<'
		{
			 if((double)this.visit(ctx.e1) < (double)this.visit(ctx.e2)){
				 return 1.0;
			 }
			 else
			 {
				 return 0.0;
			 }
		}
		else                                                           //for operator '=='
		{
			if((double)this.visit(ctx.e1) == (double)this.visit(ctx.e2)){
				return 1.0;
			}
			else
			{
				return 0.0;
			}
		}
	};
	
	//function for implementation of while loop. visits expresion e2 until relation expresion e1 is no longer true. 
	//e2 is normally a sequence expresion but can be others where assigning is the most useful
	public Double visitWhile(simpleCalcParser.WhileContext ctx){
       while(this.visit(ctx.e1) != 0){
			   this.visit(ctx.e2);
	   }
	   return 0.0;
	};

	//function for redirecting while expresion to actual context
	public Double visitLoop(simpleCalcParser.LoopContext ctx){
        return this.visit(ctx.whileloop());
	};

	//if statement implementation
	//e1 is relation expresion
	//e2 is the expresion if relation is true (normally a sequence expresion but can be others where assigning is the most useful).
	//e3 is the expresion if relation is not true (i.e. else).
	public Double visitIf(simpleCalcParser.IfContext ctx){
		if(this.visit(ctx.e1) != 0){                        
			this.visit(ctx.e2);			
		}
		else
		{
			this.visit(ctx.e3);
		}
	   return 0.0;
	 };

	//function for redirecting if expresion to actual context
	public Double visitIfstat(simpleCalcParser.IfstatContext ctx){
        return this.visit(ctx.ifelse());
	};

	 //funtion for not operator on bolean expresion
	 //WARNING all none bolean values parsed through this funtion will become one and is not a substitute for 
	 //complete binary not convertion
	public Double visitIfnot(simpleCalcParser.IfnotContext ctx){
	    if(this.visit(ctx.e) > 0){
		   return 0.0;
		}
		else
		{
           return 1.0;
		}
	};

	//funtion for and operator on bolean expresion
	//WARNING all none bolean values parsed through this funtion will become one and is not a substitute for 
	//complete binary and convertion
	public Double visitIfand(simpleCalcParser.IfandContext ctx){
		if(this.visit(ctx.e1) > 0 && this.visit(ctx.e2) > 0){
           return 1.0;
		}
		else
		{
		   return 0.0;
		}
	};

	//funtion for or operator on bolean expresion
	//WARNING all none bolean values parsed through this funtion will become one and is not a substitute for 
	//complete binary or convertion
	public Double visitIfor(simpleCalcParser.IforContext ctx){
		if(this.visit(ctx.e1) > 0 || this.visit(ctx.e2) > 0){
			return 1.0;
		}
		else
	    {
		    return 0.0;
		}
	};

	public Double visitSequence(simpleCalcParser.SequenceContext ctx){
		for(simpleCalcParser.ExprContext expr : ctx.expr()){
			this.visit(expr);
		}
		return 0.0;
	};

	//function for a vere simple java level input implementation. this is a supoptimal implementation
	//since it is a hardcoded form in gramma rather than any real function implementation.
	//this was done for fun as an experiment.
	//WARNING. absolute correct user imput is required. There is no error handling. 
	public Double visitInput(simpleCalcParser.InputContext ctx){
		System.out.print("input double here: ");
		Scanner yeet = new Scanner(System.in);
		return Double.parseDouble(yeet.nextLine());
	};

}

